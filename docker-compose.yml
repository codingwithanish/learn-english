version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: learn-english-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: learn_english
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - learn-english-network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: learn-english-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - learn-english-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: learn-english-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/learn_english
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=development-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=60
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - INSTAGRAM_CLIENT_ID=${INSTAGRAM_CLIENT_ID:-}
      - INSTAGRAM_CLIENT_SECRET=${INSTAGRAM_CLIENT_SECRET:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=us-east-1
      - S3_BUCKET=learn-english-audio
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - learn-english-network
    command: |
      sh -c '
        echo "Waiting for database..." &&
        sleep 10 &&
        echo "Database should be ready!" &&
        (alembic upgrade head || echo "Migration failed, continuing...") &&
        (python -m app.utils.seed_data || echo "Seed data failed, continuing...") &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      '

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: learn-english-celery-worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/learn_english
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=us-east-1
      - S3_BUCKET=learn-english-audio
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - learn-english-network
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=2

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: learn-english-celery-beat
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/learn_english
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - celery_beat_data:/app/beat-data
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - learn-english-network
    command: celery -A app.workers.celery_app beat --loglevel=info --schedule=/app/beat-data/celerybeat-schedule.db

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: learn-english-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - REACT_APP_INSTAGRAM_CLIENT_ID=${INSTAGRAM_CLIENT_ID:-}
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - learn-english-network
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: learn-english-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - learn-english-network
    profiles:
      - production

  # Development Database Admin Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: learn-english-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@learnenglish.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - learn-english-network
    profiles:
      - development

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: learn-english-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - learn-english-network
    profiles:
      - development

volumes:
  postgres_data:
  redis_data:
  backend_data:
  celery_beat_data:
  pgadmin_data:

networks:
  learn-english-network:
    driver: bridge